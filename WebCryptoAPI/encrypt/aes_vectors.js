
// aes-vectors.js

// The following function returns an array of test vectors
// for the subtleCrypto encrypt method.
//
// Each test vector has the following fields:
//     name - a unique name for this vector
//     keyBuffer - an arrayBuffer with the key data in raw form
//     key - a CryptoKey object for the keyBuffer. INITIALLY null! You must fill this in first to use it!
//     algorithm - the value of the AlgorithmIdentifier parameter to provide to encrypt
//     plaintext - the text to encrypt
//     result - the expected result (usually just ciphertext, sometimes with added authentication)
function getTestVectors() {
    // Before we can really start, we need to fill a bunch of buffers with data
    var plaintext = new Uint8Array([84, 104, 105, 115, 32, 115,
        112, 101, 99, 105, 102, 105, 99, 97, 116, 105, 111, 110,
        32, 100, 101, 115, 99, 114, 105, 98, 101, 115, 32, 97, 32,
        74, 97, 118, 97, 83, 99, 114, 105, 112, 116, 32, 65, 80,
        73, 32, 102, 111, 114, 32, 112, 101, 114, 102, 111, 114,
        109, 105, 110, 103, 32, 98, 97, 115, 105, 99, 32, 99, 114,
        121, 112, 116, 111, 103, 114, 97, 112, 104, 105, 99, 32,
        111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 32, 105,
        110, 32, 119, 101, 98, 32, 97, 112, 112, 108, 105, 99, 97,
        116, 105, 111, 110, 115, 44, 32, 115, 117, 99, 104, 32, 97,
        115, 32, 104, 97, 115, 104, 105, 110, 103, 44, 32, 115,
        105, 103, 110, 97, 116, 117, 114, 101, 32, 103, 101, 110,
        101, 114, 97, 116, 105, 111, 110, 32, 97, 110, 100, 32,
        118, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110,
        44, 32, 97, 110, 100, 32, 101, 110, 99, 114, 121, 112,
        116, 105, 111, 110, 32, 97, 110, 100, 32, 100, 101, 99,
        114, 121, 112, 116, 105, 111, 110, 46, 32, 65, 100, 100,
        105, 116, 105, 111, 110, 97, 108, 108, 121, 44, 32, 105,
        116, 32, 100, 101, 115, 99, 114, 105, 98, 101, 115, 32, 97,
        110, 32, 65, 80, 73, 32, 102, 111, 114, 32, 97, 112, 112,
        108, 105, 99, 97, 116, 105, 111, 110, 115, 32, 116, 111,
        32, 103, 101, 110, 101, 114, 97, 116, 101, 32, 97, 110,
        100, 47, 111, 114, 32, 109, 97, 110, 97, 103, 101, 32, 116,
        104, 101, 32, 107, 101, 121, 105, 110, 103, 32, 109, 97,
        116, 101, 114, 105, 97, 108, 32, 110, 101, 99, 101, 115,
        115, 97, 114, 121, 32, 116, 111, 32, 112, 101, 114, 102,
        111, 114, 109, 32, 116, 104, 101, 115, 101, 32, 111, 112,
        101, 114, 97, 116, 105, 111, 110, 115, 46, 32, 85, 115,
        101, 115, 32, 102, 111, 114, 32, 116, 104, 105, 115, 32,
        65, 80, 73, 32, 114, 97, 110, 103, 101, 32, 102, 114, 111,
        109, 32, 117, 115, 101, 114, 32, 111, 114, 32, 115, 101,
        114, 118, 105, 99, 101, 32, 97, 117, 116, 104, 101, 110,
        116, 105, 99, 97, 116, 105, 111, 110, 44, 32, 100, 111,
        99, 117, 109, 101, 110, 116, 32, 111, 114, 32, 99, 111,
        100, 101, 32, 115, 105, 103, 110, 105, 110, 103, 44, 32,
        97, 110, 100, 32, 116, 104, 101, 32, 99, 111, 110, 102,
        105, 100, 101, 110, 116, 105, 97, 108, 105, 116, 121, 32,
        97, 110, 100, 32, 105, 110, 116, 101, 103, 114, 105, 116,
        121, 32, 111, 102, 32, 99, 111, 109, 109, 117, 110, 105,
        99, 97, 116, 105, 111, 110, 115, 46]);

    // We want some random key bytes of various sizes.
    // These were randomly generated from a script.
    var keyBytes128 = new Uint8Array([222, 192, 212, 252, 191, 60, 71,
        65, 200, 146, 218, 189, 28, 212, 192, 78]);

    var keyBytes192 = new Uint8Array([208, 238, 131, 65, 63, 68, 196, 63, 186, 208,
        61, 207, 166, 18, 99, 152, 29, 109, 221, 95, 240, 30, 28, 246]);

    var keyBytes256 = new Uint8Array([103, 105, 56, 35, 251, 29, 88, 7, 63, 145, 236,
        233, 204, 58, 249, 16, 229, 83, 38, 22, 164, 210, 123, 19, 235, 123, 116,
        216, 0, 11, 191, 48]);

    // AES-CBC needs a 16 byte (128 bit) IV.
    var iv128 = new Uint8Array([85, 170, 248, 155, 168, 148, 19, 213, 78, 167, 39,
        167, 108, 39, 162, 132]);

    // AES-CTR needs a 16 byte (128 bit) random counter
    var counter128 = new Uint8Array([222, 96, 193, 184, 168, 216, 155, 45, 102, 106,
        190, 168, 44, 106, 29, 49]);

    // AES-GCM needs an IV of no more than 2^64 - 1 bytes. Well, 32 bytes is okay then.
    var iv256 = new Uint8Array([58, 146, 115, 42, 166, 234, 57,
        191, 57, 134, 224, 199, 63, 169, 32, 0, 32, 33, 117, 56,
        94, 248, 173, 234, 194, 200, 115, 53, 235, 146, 141, 212]);

    // Authenticated encryption via AES-GCM requires additional data that
    // will be checked. We use the ASCII encoded Editorial Note
    // following the Abstract of the Web Cryptography API recommendation.
    var additionalData = new Uint8Array([84, 104, 101, 114, 101,
        32, 97, 114, 101, 32, 55, 32, 102, 117, 114, 116, 104, 101,
        114, 32, 101, 100, 105, 116, 111, 114, 105, 97, 108, 32,
        110, 111, 116, 101, 115, 32, 105, 110, 32, 116, 104, 101,
        32, 100, 111, 99, 117, 109, 101, 110, 116, 46]);


    // Results. These were created using the Python cryptography module.

    // AES-GCM produces ciphertext and a tag.
    var ciphertextGcm128 = new Uint8Array([180, 241, 40, 183, 105,
        52, 147, 238, 224, 175, 175, 236, 168, 244, 241, 121, 9,
        202, 225, 237, 56, 216, 253, 254, 186, 102, 111, 207, 228,
        190, 130, 177, 159, 246, 6, 53, 249, 113, 228, 254, 81,
        126, 253, 191, 100, 43, 251, 147, 107, 91, 166, 231, 201,
        241, 180, 214, 112, 47, 123, 164, 186, 134, 54, 65, 22,
        181, 201, 82, 236, 59, 52, 139, 172, 39, 41, 89, 123, 62,
        102, 167, 82, 150, 250, 93, 96, 169, 135, 89, 245, 255,
        164, 192, 169, 159, 25, 16, 139, 145, 76, 4, 144, 131,
        148, 197, 204, 46, 23, 110, 193, 228, 127, 120, 242, 24,
        54, 240, 181, 162, 98, 244, 249, 68, 134, 122, 126, 151,
        38, 108, 116, 68, 150, 109, 38, 194, 21, 159, 140, 205,
        183, 35, 97, 151, 186, 120, 145, 22, 235, 22, 210, 223,
        187, 143, 162, 183, 93, 196, 104, 51, 96, 53, 234, 250,
        184, 76, 237, 157, 37, 203, 226, 87, 222, 75, 240, 95, 218,
        222, 64, 81, 165, 75, 201, 216, 190, 13, 116, 217, 69, 66,
        47, 161, 68, 247, 74, 253, 157, 181, 162, 121, 53, 32, 91,
        124, 230, 105, 224, 17, 187, 50, 61, 77, 103, 79, 71, 57,
        163, 116, 234, 149, 27, 105, 24, 31, 159, 3, 128, 130, 42,
        94, 125, 200, 142, 251, 148, 201, 17, 149, 232, 84, 50, 17,
        18, 203, 186, 226, 164, 227, 202, 76, 65, 16, 163, 224,
        132, 52, 31, 101, 129, 72, 171, 159, 42, 177, 253, 98, 86,
        201, 95, 117, 62, 12, 205, 78, 36, 126, 196, 121, 89, 185,
        37, 161, 66, 181, 117, 186, 71, 124, 132, 110, 120, 27,
        246, 163, 18, 13, 90, 200, 127, 82, 209, 241, 170, 73, 247,
        137, 96, 244, 254, 251, 119, 71, 156, 27, 107, 53, 33, 45,
        22, 0, 144, 48, 32, 11, 116, 21, 125, 246, 217, 171, 158,
        224, 142, 234, 141, 242, 168, 89, 154, 66, 227, 161, 182,
        96, 1, 88, 78, 12, 7, 239, 30, 206, 31, 89, 111, 107, 42,
        37, 241, 148, 232, 1, 8, 251, 117, 146, 183, 9, 48, 39, 94,
        59, 70, 230, 26, 165, 97, 156, 140, 141, 31, 62, 10, 206,
        55, 48, 207, 0, 197, 202, 197, 108, 133, 175, 80, 4, 16,
        154, 223, 255, 4, 196, 188, 178, 240, 29, 13, 120, 5, 225,
        202, 3, 35, 225, 158, 92, 152, 73, 205, 107, 157, 224, 245,
        99, 194, 171, 156, 245, 247, 183, 165, 40, 62, 200, 110,
        29, 151, 206, 100, 175, 88, 36, 242, 90, 4, 82, 73, 250,
        140, 245, 217, 9, 153, 35, 242, 206, 78, 197, 121, 115, 15,
        80, 128, 101, 191, 240, 91, 151, 249, 62, 62, 244, 18, 3,
        17, 135, 222, 210, 93, 149, 123]);

    //  The length of the tag defaults to 16 bytes (128 bit).
    var tagGcm128_128 = new Uint8Array([194, 226, 198, 253, 239, 28,
        197, 240, 123, 216, 176, 151, 239, 200, 184, 183]);

    var resultGcm128 = new Uint8Array(ciphertextGcm128.byteLength + tagGcm128_128.byteLength);
    resultGcm128.set(ciphertextGcm128, 0);
    resultGcm128.set(tagGcm128_128, ciphertextGcm128.byteLength);

    var vectors = [
        {
            name: "AES-GCM 128-bit key",
            keyBuffer: keyBytes128,
            algorithm: {name: "AES-GCM", iv: iv256, additionalData: additionalData, tagLength: 128},
            plaintext: plaintext,
            result: resultGcm128
        }
    ];

    return vectors;
}
